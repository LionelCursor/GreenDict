package com.cursor.greendict;


import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table WORD.
 */
public class word {

    private Long id;
    /** Not-null value. */
    private String raw_word;
    private String interpretation;
    private int sequence;
    private long dictId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient wordDao myDao;

    private dict dict;
    private Long dict__resolvedKey;


    public word() {
    }

    public word(Long id) {
        this.id = id;
    }

    public word(Long id, String raw_word, String interpretation, int sequence, long dictId) {
        this.id = id;
        this.raw_word = raw_word;
        this.interpretation = interpretation;
        this.sequence = sequence;
        this.dictId = dictId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWordDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getRaw_word() {
        return raw_word;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRaw_word(String raw_word) {
        this.raw_word = raw_word;
    }

    public String getInterpretation() {
        return interpretation;
    }

    public void setInterpretation(String interpretation) {
        this.interpretation = interpretation;
    }

    public int getSequence() {
        return sequence;
    }

    public void setSequence(int sequence) {
        this.sequence = sequence;
    }

    public long getDictId() {
        return dictId;
    }

    public void setDictId(long dictId) {
        this.dictId = dictId;
    }

    /** To-one relationship, resolved on first access. */
    public dict getDict() {
        long __key = this.dictId;
        if (dict__resolvedKey == null || !dict__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            dictDao targetDao = daoSession.getDictDao();
            dict dictNew = targetDao.load(__key);
            synchronized (this) {
                dict = dictNew;
            	dict__resolvedKey = __key;
            }
        }
        return dict;
    }

    public void setDict(dict dict) {
        if (dict == null) {
            throw new DaoException("To-one property 'dictId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dict = dict;
            dictId = dict.getId();
            dict__resolvedKey = dictId;
        }
    }

    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
